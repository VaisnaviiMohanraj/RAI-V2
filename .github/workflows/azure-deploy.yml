name: Deploy to Azure App Service

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
    
    - name: Set up .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Build Frontend
      env:
        VITE_AUTH_CLIENT_ID: ${{ secrets.VITE_AUTH_CLIENT_ID }}
        VITE_AUTH_AUTHORITY: ${{ secrets.VITE_AUTH_AUTHORITY }}
        VITE_API_SCOPE: ${{ secrets.VITE_API_SCOPE }}
      run: |
        cd Frontend
        echo "Building with Vite environment variables:"
        echo "VITE_AUTH_CLIENT_ID set: ${VITE_AUTH_CLIENT_ID:+YES}" 
        echo "VITE_AUTH_AUTHORITY set: ${VITE_AUTH_AUTHORITY:+YES}"
        echo "VITE_API_SCOPE: ${VITE_API_SCOPE}"
        npm ci
        # Clean any existing build artifacts
        rm -rf dist
        # Force production build
        NODE_ENV=production npm run build
        # Verify production build was created correctly
        echo "Verifying production build:"
        ls -la dist/
        echo "Contents of production index.html:"
        head -20 dist/index.html
        # Ensure no development server references
        if grep -q "localhost:3001" dist/index.html; then
          echo "ERROR: Development server references found in production build!"
          exit 1
        fi
    
    - name: Build Backend
      run: |
        cd Backend
        dotnet restore
        dotnet publish --configuration Release --output ./publish --no-restore
        # Remove unnecessary files that might cause path length issues
        rm -rf ./publish/runtimes/linux-*
        rm -rf ./publish/runtimes/osx-*
        find ./publish -name "*.pdb" -delete
        find ./publish -name "*.xml" -delete
    
    - name: Copy Frontend to Backend publish root
      run: |
        # Copy frontend files to Backend publish root (not wwwroot subfolder)
        cp -r Frontend/dist/* Backend/publish/
        # IMPORTANT: Ensure the frontend web.config does NOT overwrite backend web.config
        # Remove any web.config that may have come from Frontend/dist
        rm -f Backend/publish/web.config || true
        # Restore the backend web.config so ASP.NET Core handler is used
        cp Backend/web.config Backend/publish/web.config
    
    - name: Clean deployment package
      run: |
        cd Backend/publish
        # Remove files that might cause extraction issues
        find . -name "*.deps.json" -delete
        find . -name "*.runtimeconfig.dev.json" -delete
        # List final package contents for debugging
        echo "Final package structure:"
        echo "Backend files:"
        ls -la *.dll *.config *.json 2>/dev/null || echo "No backend files found"
        echo "Frontend files:"
        ls -la index.html *.js *.css 2>/dev/null || echo "No frontend files found"
        echo "Assets directory:"
        ls -la assets/ 2>/dev/null || echo "No assets directory found"
        echo "Total files to deploy:"
        find . -type f | wc -l
        echo "Verifying critical files exist:"
        ls -la index.html 2>/dev/null && echo "âœ“ index.html found" || echo "âœ— index.html MISSING"
        ls -la Backend.dll 2>/dev/null && echo "âœ“ Backend.dll found" || echo "âœ— Backend.dll MISSING"
        ls -la web.config 2>/dev/null && echo "âœ“ web.config found" || echo "âœ— web.config MISSING"

    - name: Verify effective web.config before deploy
      run: |
        echo "First 20 lines of effective web.config:"
        sed -n '1,20p' Backend/publish/web.config || true
        echo "Checking for AspNetCoreModuleV2 handler and Backend.dll reference..."
        grep -q "AspNetCoreModuleV2" Backend/publish/web.config && echo "âœ“ AspNetCoreModuleV2 present" || (echo "âœ— AspNetCoreModuleV2 missing"; exit 1)
        grep -q "arguments=\".\\/Backend.dll\"\|arguments=\\\".\\\\Backend.dll\\\"" Backend/publish/web.config && echo "âœ“ Backend.dll referenced" || (echo "âœ— Backend.dll not referenced in web.config"; exit 1)
    
    - name: Deploy using Kudu REST API (bypasses ZIP Deploy entirely)
      run: |
        cd Backend
        
        # Extract credentials from publish profile
        echo '${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}' > publish_profile.xml
        
        # Get Kudu URL and credentials
        KUDU_URL=$(grep -o 'publishUrl="[^"]*"' publish_profile.xml | head -1 | sed 's/publishUrl="//;s/"//' | sed 's/\.scm\./.scm./')
        USERNAME=$(grep -o 'userName="[^"]*"' publish_profile.xml | head -1 | sed 's/userName="//;s/"//')
        PASSWORD=$(grep -o 'userPWD="[^"]*"' publish_profile.xml | head -1 | sed 's/userPWD="//;s/"//')
        
        echo "Deploying to: $KUDU_URL"
        
        # Stop the app using Azure REST API (requires management endpoint)
        # Note: Kudu API doesn't support app stop/start, so we'll force file overwrites instead
        echo "Forcing file overwrites (Kudu API doesn't support app stop/start)"
        
        # Clear wwwroot directory (force delete without ETag check)
        curl -X DELETE -u "$USERNAME:$PASSWORD" "https://$KUDU_URL/api/vfs/site/wwwroot/" -H "If-Match: *" || echo "Directory clear failed, continuing..."
        
        # Upload files individually using Kudu VFS API
        echo "Starting file upload to Azure..."
        upload_count=0
        find publish -type f | while read file; do
          relative_path=${file#publish/}
          echo "Uploading: $relative_path"
          
          # Special logging for critical files
          if [[ "$relative_path" == "index.html" ]]; then
            echo "ðŸ”¥ CRITICAL: Uploading index.html to wwwroot root"
          fi
          
          response=$(curl -s -X PUT \
            -u "$USERNAME:$PASSWORD" \
            -H "Content-Type: application/octet-stream" \
            -H "If-Match: *" \
            --data-binary "@$file" \
            -w "HTTP_%{http_code}" \
            "https://$KUDU_URL/api/vfs/site/wwwroot/$relative_path")
          
          if [[ "$response" == *"HTTP_2"* ]]; then
            echo "âœ“ Success: $relative_path"
          else
            echo "âœ— Failed: $relative_path - $response"
          fi
          
          upload_count=$((upload_count + 1))
        done
        echo "Upload completed. Total files processed: $upload_count"
        
        # Start the app
        #curl -X POST -u "$USERNAME:$PASSWORD" "https://$KUDU_URL/api/app/start"
        
        rm publish_profile.xml
